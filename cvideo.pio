;
; Title:	        Pico-mposite PIO code
; Author:	        Dean Belfield
; Created:	        26/01/2021
; Last Updated:	    15/02/2021
;
; Modinfo:
; 15/02/2021:       Refactored to use wrap
;

.program cvideo

.wrap_target            ; This loop needs to last 64us
    irq set 0           ; Set the IRQ to reset the buffer and do not wait
 loop:
    out X, 8            ; Get 8 bits from DMA via Output Shift Register (OSR) to X
    mov pins, X         ; Move X to pins as set up in cvideo_initialise_pio
    jmp X-- loop        ; Loop while X != 0
.wrap                   ; Loop back to wrap_target

% c-sdk {
//
// Initialise the PIO
// Parameters:
// - pio: The PIO to attach this to
// - sm: The state machine number
// - offset: The instruction memory offset the program is loaded at
// - pin_base: The number of the first GPIO pin to use in the PIO
// - pin_count: The number of consecutive GPIO pins to write to
// - freq: The frequency of the PIO state machine
//
// 
void cvideo_initialise_pio(PIO pio, uint sm, uint offset, uint pin_base, uint pin_count, double freq) {
    for(uint i=pin_base; i<pin_base+pin_count; i++) {
        pio_gpio_init(pio, i);
    }
    pio_sm_set_consecutive_pindirs(pio, sm, pin_base, pin_count, true);
    pio_sm_config c = cvideo_program_get_default_config(offset);
    sm_config_set_set_pins(&c, pin_base, pin_count);
    sm_config_set_out_pins(&c, pin_base, pin_count);
    sm_config_set_out_shift(&c, false, true, 8);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    pio_sm_init(pio, sm, offset, &c);
    pio->sm[sm].clkdiv = (uint32_t) (freq * (1 << 16));
}
%}

.program keyboard_pio

;pins  0 data
;      1 clock
;      2 clock + 100ms


;jmp start
;put_data:
    



start:
wait 0 pin 0

get_data:
    set x 10
bitloop:
    wait 0 pin 1
    in pins, 1
    wait 1 pin 1
    jmp x-- bitloop
    jmp start



